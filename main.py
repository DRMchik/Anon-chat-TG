from aiogram import Bot, Dispatcher, types
from aiogram.utils import executor
import config as cfg
import logging
import sqlite3

bot = Bot(token=cfg.TOKEN)
dp = Dispatcher(bot)

global con
global curs
con = sqlite3.connect("Anon chat/anon.db")
curs = con.cursor()

def sub(chat_member):
    print(chat_member['status'])

    if chat_member['status'] != 'left':
        return True
    else:
        return False

print('Anon chat is ready!')
logging.basicConfig(level = logging.INFO)

# xD

# Data base
curs.execute("""CREATE TABLE IF NOT EXISTS users(
    id INTEGER PRIMARY KEY AUTOINCREMENT,
    user_id INT,
    active INTEGER DEFAULT (1),
    reg TEXT, 
    status INTEGER
)""")
con.commit()
# user_id - Telegram ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
# status - —Å—Ç–∞—Ç—É—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: –∏—â–µ—Ç —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∞, –Ω–µ –∏—â–µ—Ç, —É–∂–µ –≤ –¥–∏–æ–ª–æ–≥–µ
# active - –¥–æ—Å—Ç—É–ø –∫ —Ä–∞—Å—Å—ã–ª–∫–µ. 1 - –º–æ–∂–Ω–æ; 0 - –Ω–µ–ª—å–∑—è
# reg - —Å—Ç–∞—Ç—É—Å —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏: yes, no, ban

curs.execute("""CREATE TABLE IF NOT EXISTS queue(
    id INTEGER PRIMARY KEY AUTOINCREMENT,
    user_id INTEGER
)""")
con.commit()

curs.execute("""CREATE TABLE IF NOT EXISTS chats(
    id INTEGER PRIMARY KEY AUTOINCREMENT,
    one INTEGER,
    two INTEGER
)""")
con.commit()

# Commands:
# /start
@dp.message_handler(commands = ['start'])
async def start(chat: types.Message):
    if sub(await bot.get_chat_member(chat_id=-1001938263206, user_id=chat.from_user.id)): # –ï—Å–ª–∏ —É—á–∞—Å—Ç–Ω–∏–∫ –µ—Å—Ç—å –≤ –∫–∞–Ω–∞–ª–µ
        u_id = chat.from_user.id
        curs.execute("SELECT reg FROM users WHERE user_id = ?", (u_id,))
        r = curs.fetchone()
        if r is None: # –µ—Å–ª–∏ —é–∑–µ—Ä –Ω–æ–≤—ã–π
            await chat.answer(f'üé≠ –ü—Ä–∏–≤–µ—Ç, {chat.from_user.username}!')
            await chat.answer('–≠—Ç–æ –∞–Ω–æ–Ω–∏–º–Ω—ã–π —á–∞—Ç–∏–∫. –ó–¥–µ—Å—å —Ç—ã –º–æ–∂–µ—à—å –Ω–∞–π—Ç–∏ —Å–ª—É—á–∞–π–Ω–æ–≥–æ —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∞ –∏ –ø–æ–æ–±—â–∞—Ç—å—Å—è —Å –Ω–∏–º')
            markup = types.ReplyKeyboardMarkup(one_time_keyboard = True, resize_keyboard = True)
            markup.add(types.KeyboardButton('üîç –ü–æ–∏—Å–∫'))
            await chat.answer('–ù–∞—á–∏–Ω–∞–π –æ–±—â–∞—Ç—å—Å—è, –Ω–∞–∂–∞–≤ –Ω–∞ –∫–Ω–æ–ø–∫—É "üîç –ü–æ–∏—Å–∫" –∏–ª–∏ –ø—Ä–æ–ø–∏—Å–∞–≤ –∫–æ–º–∞–Ω–¥—É /search', reply_markup=markup)
            curs.execute("INSERT INTO users(user_id, reg) VALUES(?, ?)", (u_id, 'yes'))
            con.commit()
        else:
            markup = types.ReplyKeyboardMarkup(one_time_keyboard = True, resize_keyboard = True)
            markup.add(types.KeyboardButton('üîç –ü–æ–∏—Å–∫'))
            await chat.answer('–•–æ—á–µ—à—å –ø–æ–æ–±—â–∞—Ç—å—Å—è? –ü—Ä–æ–ø–∏—à–∏ –∫–æ–º–∞–Ω–¥—É /search –∏–ª–∏ –Ω–∞–∂–º–∏ –Ω–∞ –∫–Ω–æ–ø–æ—á–∫—É "üîç –ü–æ–∏—Å–∫" –∏ –Ω–∞—Ö–æ–¥–∏ —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∞!', reply_markup=markup)
    else: # –ï—Å–ª–∏ —É—á–∞—Å—Ç–Ω–∏–∫–∞ –Ω–µ—Ç –≤ –∫–∞–Ω–∞–ª–µ
        markup = types.InlineKeyboardMarkup()
        markup.add(types.InlineKeyboardButton('‚úÖ –ù–∞—à –∫–∞–Ω–∞–ª', url = 't.me/Monitoring_channelBot'))
        await chat.answer('‚ùå –£–ø—Å... –í–∞–º –Ω–∞–¥–æ –∑–∞–π—Ç–∏ –≤ –∫–∞–Ω–∞–ª –±–æ—Ç–∞!', reply_markup = markup)

# /search
@dp.message_handler(commands = ['search'])
async def start(chat: types.Message):
    if sub(await bot.get_chat_member(chat_id=-1001938263206, user_id=chat.from_user.id)): # –ï—Å–ª–∏ —É—á–∞—Å—Ç–Ω–∏–∫ –µ—Å—Ç—å –≤ –∫–∞–Ω–∞–ª–µ
        u_id = chat.from_user.id
        curs.execute("SELECT reg FROM users WHERE user_id = ?", (u_id,))
        r = curs.fetchone()
        if r is None: # –µ—Å–ª–∏ —é–∑–µ—Ä –Ω–æ–≤—ã–π
            await chat.answer('‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–æ–ø–∏—à–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É /start , —á—Ç–æ–±—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –±–æ—Ç–æ–º!')
        else:
            curs.execute("SELECT reg FROM users WHERE user_id = ?", (u_id,))
            r = curs.fetchone()[0]
            if r == 'ban':
                await chat.answer('‚ùå –í—ã –±—ã–ª–∏ –∑–∞–±–∞–Ω–µ–Ω—ã –≤ –Ω–∞—à–µ–º –±–æ—Ç–µ!')
            else: # –µ—Å–ª–∏ –≤—Å—ë –æ–∫–µ: –æ—Å–Ω–æ–≤–∞
                markup = types.ReplyKeyboardMarkup(one_time_keyboard = True, resize_keyboard = True)
                markup.add(types.KeyboardButton('‚ùå –ü—Ä–µ–∫—Ä–∞—Ç–∏—Ç—å –ø–æ–∏—Å–∫'))
                sf = curs.execute("SELECT * FROM queue").fetchmany(1)
                cm = None
                sp = None
                if bool(len(sf)):
                    for row in sf:
                        cm = row[1]
                else:
                    sp = False

                if sp is False:
                    curs.execute("INSERT INTO queue(user_id) VALUES(?)", (u_id,))
                    con.commit()
                    await chat.answer('üîç –ò—â–µ–º —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∞...', reply_markup=markup)
                else:
                    curs.execute("DELETE FROM queue WHERE user_id = ?", (cm,))
                    con.commit()
                    curs.execute("INSERT INTO chats(one, two) VALUES(?, ?)", (u_id, cm))
                    con.commit()
                    su_msg = '‚úÖ –°–æ–±–µ—Å–µ–¥–Ω–∏–∫ –Ω–∞–π–¥–µ–Ω!\n/stop - –∑–∞–≤–µ—Ä—à–∏—Ç—å –±–µ—Å–µ–¥—É (–∏–ª–∏ –ø–æ –∫–Ω–æ–ø–∫–µ)'
                    markup = types.ReplyKeyboardMarkup(one_time_keyboard = True, resize_keyboard = True)
                    markup.add(types.KeyboardButton('–ü—Ä–µ–∫—Ä–∞—Ç–∏—Ç—å –±–µ—Å–µ–¥—É'))

                    await bot.send_message(u_id, su_msg, reply_markup=markup)
                    await bot.send_message(cm, su_msg, reply_markup=markup)
    else: # –ï—Å–ª–∏ —É—á–∞—Å—Ç–Ω–∏–∫–∞ –Ω–µ—Ç –≤ –∫–∞–Ω–∞–ª–µ
        markup = types.InlineKeyboardMarkup()
        markup.add(types.InlineKeyboardButton('‚úÖ –ù–∞—à –∫–∞–Ω–∞–ª', url = 't.me/Monitoring_channelBot'))
        await chat.answer('‚ùå –£–ø—Å... –í–∞–º –Ω–∞–¥–æ –∑–∞–π—Ç–∏ –≤ –∫–∞–Ω–∞–ª –±–æ—Ç–∞!', reply_markup = markup)

# /stop
@dp.message_handler(commands = ['stop'])
async def start(chat: types.Message):
    if sub(await bot.get_chat_member(chat_id=-1001938263206, user_id=chat.from_user.id)): # –ï—Å–ª–∏ —É—á–∞—Å—Ç–Ω–∏–∫ –µ—Å—Ç—å –≤ –∫–∞–Ω–∞–ª–µ
        u_id = chat.from_user.id
        curs.execute("SELECT reg FROM users WHERE user_id = ?", (u_id,))
        r = curs.fetchone()
        if r is None: # –µ—Å–ª–∏ —é–∑–µ—Ä –Ω–æ–≤—ã–π
            await chat.answer('‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–æ–ø–∏—à–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É /start , —á—Ç–æ–±—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –±–æ—Ç–æ–º!')
        else:
            curs.execute("SELECT reg FROM users WHERE user_id = ?", (u_id,))
            r = curs.fetchone()[0]
            if r == 'ban':
                await chat.answer('‚ùå –í—ã –±—ã–ª–∏ –∑–∞–±–∞–Ω–µ–Ω—ã –≤ –Ω–∞—à–µ–º –±–æ—Ç–µ!')
            else:
                chat_info = curs.execute("SELECT * FROM chats WHERE one = ?", (u_id,))
                id_chat = 0
                for row in chat_info:
                    id_chat = row[0]
                    chat_info = [row[0], row[2]]
                
                if id_chat == 0:
                    chat_info = curs.execute("SELECT * FROM chats WHERE two = ?", (u_id,))
                    for row in chat_info:
                        id_chat = row[0]
                        chat_info = [row[0], row[1]]
                    if id_chat == 0:
                        await chat.answer('‚ùå –£ –≤–∞—Å –Ω–µ—Ç –Ω–∏–∫–∞–∫–æ–π –±–µ—Å–µ–¥—ã')
                    else:
                        markup = types.ReplyKeyboardMarkup(one_time_keyboard = True, resize_keyboard = True)
                        markup.add(types.KeyboardButton('üîç –ü–æ–∏—Å–∫'))
                        await chat.answer('‚úÖ –í—ã –∑–∞–∫–æ–Ω—á–∏–ª–∏ –±–µ—Å–µ–¥—É!', reply_markup=markup)
                        await bot.send_message(chat_info[1], '‚ùå –í–∞—à —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫ –∑–∞–∫–æ–Ω—á–∏–ª –±–µ—Å–µ–¥—É :(', reply_markup=markup)

                        curs.execute("DELETE FROM chats WHERE id = ?", (chat_info[0],))
                        con.commit()
                else:
                    markup = types.ReplyKeyboardMarkup(one_time_keyboard = True, resize_keyboard = True)
                    markup.add(types.KeyboardButton('üîç –ü–æ–∏—Å–∫'))
                    await chat.answer('‚úÖ –í—ã –∑–∞–∫–æ–Ω—á–∏–ª–∏ –±–µ—Å–µ–¥—É!', reply_markup=markup)
                    await bot.send_message(chat_info[1], '‚ùå –í–∞—à —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫ –∑–∞–∫–æ–Ω—á–∏–ª –±–µ—Å–µ–¥—É :(', reply_markup=markup)

                    curs.execute("DELETE FROM chats WHERE id = ?", (id_chat,))
                    con.commit()
    else: # –ï—Å–ª–∏ —É—á–∞—Å—Ç–Ω–∏–∫–∞ –Ω–µ—Ç –≤ –∫–∞–Ω–∞–ª–µ
        markup = types.InlineKeyboardMarkup()
        markup.add(types.InlineKeyboardButton('‚úÖ –ù–∞—à –∫–∞–Ω–∞–ª', url = 't.me/Monitoring_channelBot'))
        await chat.answer('‚ùå –£–ø—Å... –í–∞–º –Ω–∞–¥–æ –∑–∞–π—Ç–∏ –≤ –∫–∞–Ω–∞–ª –±–æ—Ç–∞!', reply_markup = markup)

@dp.message_handler(content_types='text')
async def msg(chat: types.Message):
    if sub(await bot.get_chat_member(chat_id=-1001938263206, user_id=chat.from_user.id)): # –ï—Å–ª–∏ —É—á–∞—Å—Ç–Ω–∏–∫ –µ—Å—Ç—å –≤ –∫–∞–Ω–∞–ª–µ
        u_id = chat.from_user.id
        curs.execute("SELECT reg FROM users WHERE user_id = ?", (u_id,))
        r = curs.fetchone()
        if r is None: # –µ—Å–ª–∏ —é–∑–µ—Ä –Ω–æ–≤—ã–π
            await chat.answer('‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–æ–ø–∏—à–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É /start , —á—Ç–æ–±—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –±–æ—Ç–æ–º!')
        else:
            curs.execute("SELECT reg FROM users WHERE user_id = ?", (u_id,))
            r = curs.fetchone()[0]
            if r == 'ban':
                await chat.answer('‚ùå –í—ã –±—ã–ª–∏ –∑–∞–±–∞–Ω–µ–Ω—ã –≤ –Ω–∞—à–µ–º –±–æ—Ç–µ!')
            else:
                msg = chat.text
                if msg == '‚ùå –ü—Ä–µ–∫—Ä–∞—Ç–∏—Ç—å –ø–æ–∏—Å–∫':
                    curs.execute("DELETE FROM queue WHERE user_id = ?", (u_id,))
                    con.commit()
                    markup = types.ReplyKeyboardMarkup(one_time_keyboard = True, resize_keyboard = True)
                    markup.add(types.KeyboardButton('üîç –ü–æ–∏—Å–∫'))
                    await chat.answer('‚ùå –í—ã –ø—Ä–µ–∫—Ä–∞—Ç–∏–ª–∏ –ø–æ–∏—Å–∫ —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∞', reply_markup=markup)

                elif msg == 'üîç –ü–æ–∏—Å–∫':
                    markup = types.ReplyKeyboardMarkup(one_time_keyboard = True, resize_keyboard = True)
                    markup.add(types.KeyboardButton('‚ùå –ü—Ä–µ–∫—Ä–∞—Ç–∏—Ç—å –ø–æ–∏—Å–∫'))

                    sf = curs.execute("SELECT * FROM queue").fetchmany(1)
                    cm = None
                    sp = None
                    if bool(len(sf)):
                        for row in sf:
                            cm = row[1]
                    else:
                        sp = False

                    if sp is False:
                        curs.execute("INSERT INTO queue(user_id) VALUES(?)", (u_id,))
                        con.commit()
                        await chat.answer('üîç –ò—â–µ–º —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∞...', reply_markup=markup)
                    else:
                        curs.execute("DELETE FROM queue WHERE user_id = ?", (cm,))
                        con.commit()
                        curs.execute("INSERT INTO chats(one, two) VALUES(?, ?)", (u_id, cm))
                        con.commit()
                        su_msg = '‚úÖ –°–æ–±–µ—Å–µ–¥–Ω–∏–∫ –Ω–∞–π–¥–µ–Ω!\n/stop - –∑–∞–≤–µ—Ä—à–∏—Ç—å –±–µ—Å–µ–¥—É (–∏–ª–∏ –ø–æ –∫–Ω–æ–ø–∫–µ)'
                        markup = types.ReplyKeyboardMarkup(one_time_keyboard = True, resize_keyboard = True)
                        markup.add(types.KeyboardButton('–ü—Ä–µ–∫—Ä–∞—Ç–∏—Ç—å –±–µ—Å–µ–¥—É'))

                        await bot.send_message(u_id, su_msg, reply_markup=markup)
                        await bot.send_message(cm, su_msg, reply_markup=markup)
                elif msg == '–ü—Ä–µ–∫—Ä–∞—Ç–∏—Ç—å –±–µ—Å–µ–¥—É':
                    chat_info = curs.execute("SELECT * FROM chats WHERE one = ?", (u_id,))
                    id_chat = 0
                    for row in chat_info:
                        id_chat = row[0]
                        chat_info = [row[0], row[2]]
                
                    if id_chat == 0:
                        chat_info = curs.execute("SELECT * FROM chats WHERE two = ?", (u_id,))
                        for row in chat_info:
                            id_chat = row[0]
                            chat_info = [row[0], row[1]]
                        if id_chat == 0:
                            await chat.answer('‚ùå –£ –≤–∞—Å –Ω–µ—Ç –Ω–∏–∫–∞–∫–æ–π –±–µ—Å–µ–¥—ã')
                        else:
                            markup = types.ReplyKeyboardMarkup(one_time_keyboard = True, resize_keyboard = True)
                            markup.add(types.KeyboardButton('üîç –ü–æ–∏—Å–∫'))
                            await chat.answer('‚úÖ –í—ã –∑–∞–∫–æ–Ω—á–∏–ª–∏ –±–µ—Å–µ–¥—É!', reply_markup=markup)
                            await bot.send_message(chat_info[1], '‚ùå –í–∞—à —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫ –∑–∞–∫–æ–Ω—á–∏–ª –±–µ—Å–µ–¥—É :(', reply_markup=markup)

                            curs.execute("DELETE FROM chats WHERE id = ?", (chat_info[0],))
                            con.commit()
                    else:
                        markup = types.ReplyKeyboardMarkup(one_time_keyboard = True, resize_keyboard = True)
                        markup.add(types.KeyboardButton('üîç –ü–æ–∏—Å–∫'))
                        await chat.answer('‚úÖ –í—ã –∑–∞–∫–æ–Ω—á–∏–ª–∏ –±–µ—Å–µ–¥—É!', reply_markup=markup)
                        await bot.send_message(chat_info[1], '‚ùå –í–∞—à —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫ –∑–∞–∫–æ–Ω—á–∏–ª –±–µ—Å–µ–¥—É :(', reply_markup=markup)

                        curs.execute("DELETE FROM chats WHERE id = ?", (id_chat,))
                        con.commit()
                else:
                    chat_info = curs.execute("SELECT * FROM chats WHERE one = ?", (u_id,))
                    id_chat = 0
                    for row in chat_info:
                        id_chat = row[0]
                        chat_info = [row[0], row[2]]
                
                    if id_chat == 0:
                        chat_info = curs.execute("SELECT * FROM chats WHERE two = ?", (u_id,))
                        for row in chat_info:
                            id_chat = row[0]
                            chat_info = [row[0], row[1]]

                    await bot.send_message(chat_info[1], msg)

    else: # –ï—Å–ª–∏ —É—á–∞—Å—Ç–Ω–∏–∫–∞ –Ω–µ—Ç –≤ –∫–∞–Ω–∞–ª–µ
        markup = types.InlineKeyboardMarkup()
        markup.add(types.InlineKeyboardButton('‚úÖ –ù–∞—à –∫–∞–Ω–∞–ª', url = 't.me/Monitoring_channelBot'))
        await chat.answer('‚ùå –£–ø—Å... –í–∞–º –Ω–∞–¥–æ –∑–∞–π—Ç–∏ –≤ –∫–∞–Ω–∞–ª –±–æ—Ç–∞!', reply_markup = markup)

executor.start_polling(dp)